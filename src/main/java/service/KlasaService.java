package service;

import domain.Klasa;
import domain.Uczen;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;


/**
 * Created by kamil on 25.10.14.
 */
public class KlasaService {

    public static final String URL = "jdbc:hsqldb:hsql://localhost/";

    public static final String CREATE_KLASA_TABLE = "CREATE TABLE Klasa(id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY , " +
            "nr INTEGER , oddzial CHAR(1))";

    public static final String ADD_KLASA = "INSERT INTO klasa(nr, oddzial) VALUES(?, ?)";
    public static final String UPDATE_KLASA = "UPDATE klasa SET nr=?, oddzial=?";
    public static final String DELETE_KLASA = "DELETE FROM klasa WHERE id=?";
    public static final String GET_ALL = "SELECT id, nr, oddzial FROM klasa";
    public static final String DELETE_ALL = "DELETE FROM klasa";
    public static final String GET_ALL_IN_CLASS = "SELECT uczen.id, imie, nazwisko, data_urodzenia FROM uczen WHERE klasa_id = ?";

    private Connection connection;

    public KlasaService() {
        try {
            connection = DriverManager.getConnection(URL);
            if(!checkIfTableExists()) {
                connection.createStatement().executeUpdate(CREATE_KLASA_TABLE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }


    }

    private Boolean checkIfTableExists() {
        try {
            Statement statement = connection.createStatement();
            ResultSet rs = connection.getMetaData().getTables(null, null, null,
                    null);

            while (rs.next()) {
                if ("Klasa".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    return true;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public Klasa zapisz(Klasa klasa) {

        try {
            String stmt = "";
            boolean isUpdated = false;
            if(klasa.getId() != null) {
                stmt = UPDATE_KLASA;
                isUpdated = true;
            } else {
                stmt = ADD_KLASA;
            }
            PreparedStatement addKlasaStatement = connection.prepareStatement(stmt, Statement.RETURN_GENERATED_KEYS);
            addKlasaStatement.setInt(1, klasa.getNr());
            addKlasaStatement.setString(2, klasa.getOddzial().toString());
            addKlasaStatement.executeUpdate();
            if(isUpdated) {
                return klasa;
            }
            ResultSet generatedKeys = null;
            try {
                generatedKeys = addKlasaStatement.getGeneratedKeys();
                if (generatedKeys.next()) {
                    klasa.setId(generatedKeys.getLong(1));
                }
            } finally {
                if(generatedKeys != null) {
                    generatedKeys.close();
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
        return klasa;
    }

    public void usun(Klasa klasa) throws Exception {
        if(klasa.getId() == null) {
            throw new Exception("Podany uczen nie jest zapisany w bazie.");
        }
        try {
            PreparedStatement usunStatement = connection.prepareStatement(DELETE_KLASA);
            usunStatement.setLong(1, klasa.getId());
            usunStatement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void usunWszystkich() {
        try {
            connection.prepareStatement(DELETE_ALL).executeUpdate();
        } catch (SQLException e) {}
    }

    public List<Klasa> pobierzWszystkie() {
        try {
            ResultSet rs = connection.prepareStatement(GET_ALL).executeQuery();
            List<Klasa> klasy = new ArrayList<>();
            while (rs.next()) {
                Klasa klasa = new Klasa(rs.getInt("nr"), rs.getString("oddzial").charAt(0));
                klasa.setId(rs.getLong("id"));
                klasa.setUczniowie(pobierzWszystkichZKlasy(klasa));
                klasy.add(klasa);
            }
            return klasy;
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    public List<Uczen> pobierzWszystkichZKlasy(Klasa klasa) {
        try {
            PreparedStatement ps = connection.prepareStatement(GET_ALL_IN_CLASS);
            ps.setLong(1, klasa.getId());
            ResultSet rs = ps.executeQuery();
            List<Uczen> uczniowie = new ArrayList<>();
            while (rs.next()) {
                Uczen uczen = new Uczen(rs.getString("imie"), rs.getString("nazwisko"), rs.getDate("data_urodzenia"));
                uczen.setId(rs.getLong("id"));
                uczen.setKlasa(klasa);
                uczniowie.add(uczen);
            }
            return uczniowie;
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    public void close() {
        try {
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

}
